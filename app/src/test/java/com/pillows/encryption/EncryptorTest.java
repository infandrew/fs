package com.pillows.encryption;

import android.util.Log;

import com.pillows.encryption.Encryptor;
import com.pillows.phonesafe.Settings;

import junit.framework.Assert;

import org.apache.commons.io.FileUtils;
import org.hamcrest.core.IsNot;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import static org.mockito.Matchers.anyString;
/**
 * Created by agudz on 31/12/15.
 */


//@RunWith(PowerMockRunner.class)
//@PrepareForTest({ android.util.Log.class })
public class EncryptorTest {

    /*@BeforeClass
    public static void beforeClass() {
        PowerMockito.mockStatic(android.util.Log.class);
        PowerMockito.when(android.util.Log.e(anyString(), anyString()))
                .thenAnswer(new Answer<Void>() {
                    public Void answer(InvocationOnMock invocation) throws Throwable {
                        System.out.println("" + invocation.getArguments()[0] + invocation.getArguments()[1]);
                        return null;
                    }
                });
    }*/

    /*@Test
    public void testLogMock() {
        Log.e("TAG", "MESSage");
    }*/

    /**
     * Checks that generated bytes are equals for same base strings.
     */
    @Test
    public void testKeyGeneration() throws Exception {
        byte[] b1 = Encryptor.generate128ByteKey("304029450398", "SUN");
        byte[] b2 = Encryptor.generate128ByteKey("304029450398", "SUN");
        byte[] b3 = Encryptor.generate128ByteKey("304029450398", "SUN");
        byte[] b4 = Encryptor.generate128ByteKey("304029450398", "SUN");

        Assert.assertTrue(Arrays.equals(b1, b2));
        Assert.assertTrue(Arrays.equals(b3, b4));
        Assert.assertTrue(Arrays.equals(b1, b4));
    }

    /**
     * Test Encryptor creates files
     */
    @Test
    public void testCreation() throws IOException {
        Encryptor enc = new Encryptor("201025153020", "SUN");

        String inputPath = "src/test/resources/1.jpg";
        String encPath = "src/test/resources/1.enc.jpg";
        String decPath = "src/test/resources/1.dec.jpg";
        String testPath = "src/test/resources/1.test.jpg";

        File inputFile = new File(inputPath);
        File encFile = new File(encPath);
        File decFile = new File(decPath);
        File testFile = new File(testPath);

        FileUtils.copyFile(inputFile, testFile);

        Assert.assertTrue(inputFile.exists());
        Assert.assertTrue(testFile.exists());

        enc.encrypt(testPath, encPath);

        Assert.assertTrue(encFile.exists());

        Encryptor enc2 = new Encryptor("201025153020", "SUN");

        enc2.decrypt(encPath, decPath);

        Assert.assertTrue(decFile.exists());

        Assert.assertTrue(FileUtils.contentEquals(inputFile, decFile));

        encFile.delete();
        Assert.assertTrue(decFile.delete());
    }

    /**
     * Test Encryptor creates files
     */
    @Test
    public void testWatermark() throws IOException {
        String inputPath = "src/test/resources/1.jpg";
        String testPath = "src/test/resources/1.test.jpg";

        File inputFile = new File(inputPath);
        File testFile = new File(testPath);

        FileUtils.copyFile(inputFile, testFile);

        Assert.assertTrue(inputFile.exists());
        Assert.assertTrue(testFile.exists());

        Encryptor enc = new Encryptor("201025153020", "SUN");

        enc.encrypt(testPath);

        Encryptor enc2 = new Encryptor("201025153020", "SUN");

        enc2.decrypt(testPath);

        Assert.assertTrue(testFile.exists());

        Assert.assertTrue(FileUtils.contentEquals(inputFile, testFile));

        Assert.assertTrue(testFile.delete());
    }

    /**
     * Test Encryptor
     */
    @Test
    public void testEncryptByteArray() throws IOException {
        Encryptor enc = new Encryptor("201025153020", "SUN");

        Assert.assertNotNull(Settings.WATERMARK);

        byte[] encBytes = enc.encrypt(Settings.WATERMARK);

        Assert.assertNotNull(encBytes);
        Assert.assertFalse(Arrays.equals(encBytes, Settings.WATERMARK));

        Encryptor enc2 = new Encryptor("201025153020", "SUN");

        byte[] decBytes = enc2.decrypt(encBytes);

        Assert.assertFalse(Arrays.equals(encBytes, decBytes));
        Assert.assertTrue(Arrays.equals(Settings.WATERMARK, decBytes));
    }

}
